@use 'sass:math';
@import '~@/styles/abstracts/variables';

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function strip-units($value) {
  @return math.div(to-number($value), to-number($value) * 0 + 1);
}

@function to-px($string) {
  @return #{strip-units($string)}px;
}

@function to-rem($pixels) {
  @return #{math.div(strip-units($pixels), strip-units($base-font-size))}rem;
}

%default-font {
  font-family: Roboto, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin apply-font-style($size, $color, $weight) {
  color: $color;
  font-size: to-rem($size);
  font-weight: $weight;
}

@mixin apply-typography-size($size) {
  @include apply-typography-weights($size);
  font-size: to-rem($size);
}

@mixin apply-typography-weight($weight) {
  font-weight: $weight;
}

@mixin apply-typography-weights($size) {
  &-thin {
    @include apply-typography-weight($font-weight-thin);
    font-size: to-rem($size);
  }

  &-regular {
    @include apply-typography-weight($font-weight-regular);
    font-size: to-rem($size);
  }

  &-medium {
    @include apply-typography-weight($font-weight-medium);
    font-size: to-rem($size);
  }

  &-bold {
    @include apply-typography-weight($font-weight-bold);
    font-size: to-rem($size);
  }
}

@mixin apply-typography-sizes($sizes) {
  &-xs {
    @include apply-typography-size(nth($sizes, 1));
  }

  &-sm {
    @include apply-typography-size(nth($sizes, 2));
  }

  &-md {
    @include apply-typography-size(nth($sizes, 3));
  }

  &-lg {
    @include apply-typography-size(nth($sizes, 4));
  }
}

@mixin apply-typography($type, $defaultColor, $sizes) {
  .typ,
  %typ {
    &-#{$type} {
      @include apply-typography-sizes($sizes);
      @include apply-typography-weights(nth($sizes, 3));
    }
  }
}

@mixin apply-image-size($size) {
  display: inline-block;
  font-size: 0;
  height: 100%;
  width: to-px($size);

  img {
    width: 100%;
  }
}

@mixin apply-image-sizes($sizes) {
  &-xs {
    @include apply-image-size(nth($sizes, 1));
  }

  &-sm {
    @include apply-image-size(nth($sizes, 2));
  }

  &-md {
    @include apply-image-size(nth($sizes, 3));
  }

  &-lg {
    @include apply-image-size(nth($sizes, 4));
  }
}

%card-spacer {
  padding: $spacer-sm;

  @media screen and (min-width: $breakpoint-xs) {
    padding: $spacer-md;
  }

  @media screen and (min-width: $breakpoint-sm) {
    padding: $spacer-xl;
  }

  @media screen and (min-width: $breakpoint-lg) {
    padding: $spacer-xl $spacer-3xl;
  }

  @media screen and (min-width: $breakpoint-2xl) {
    padding: $spacer-xl $spacer-4xl;
  }
}
